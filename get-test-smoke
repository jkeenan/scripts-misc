#!/usr/bin/env perl
use 5.14.0;
use warnings;
our $VERSION = '0.01';
use Carp;
use Config;
use Cwd;
use Getopt::Long;
use File::Basename;
use File::Copy;
use File::Path qw(make_path);
use File::Spec 0.82;
use File::Temp qw(tempdir);
use Perl::Download::FTP::Distribution 0.04;

BEGIN {
    # Test::Smoke prerequisites not found in Perl 5 core
    use CGI::Util;
    use JSON;
    use JSON::XS;
    use System::Info 0.05;
    use HTTP::Daemon;
    use HTTP::Message;
    eval "require Test::NoWarnings;"
}

=head1 NAME

get-test-smoke - Alternate configuration for Test-Smoke

=head1 SYNOPSIS

    ./get-test-smoke --application_dir=/home/username/p5smoke

=head1 DESCRIPTION

=head2 Status

This is B<alpha> code.  YMMV.

=head2 Background

L<Test-Smoke|http://search.cpan.org/dist/Test-Smoke/> is a CPAN library which
has long served as the basis for L<smoke-testing the Perl 5 core
distribution|http://perl5.test-smoke.org/search>.   It is the product of many
years of Perl community work, especially that done at L<Perl QA Hackathons and
Toolchain Summits|http://act.qa-hackathon.org/>.

Once installed and configured on a given platform, F<Test-Smoke> can be used
in either of two ways:

=over 4

=item 1 Automated smoke testing

Here individual smoke test runs are begun automatically by scheduler programs
such as F<cron>.  Generally speaking, automated smoke testing focuses on the
main branch of Perl 5 core development, known as I<blead>.

=item 2 Manual smoke testing

Here individual smoke test runs are begun by a human calling C<sh
./smokecurrent.sh> on the command-line.  Manual smoke testing is often used to
test non-blead branches of the Perl 5 core distribution and/or different Perl
configuration options.

=back

=head2 The Use Case for F<get-test-smoke>

F<get-test-smoke> is likely to be of more use for case 2 above, manual smoke
testing.  It should be useful when you often need to switch among different
Perl configuration options or different branches of the Perl 5 core
distribution.  It should also be useful if you are installing a new platform
or virtual machine and you want to get smoke testing of the Perl 5 core
distribution up and running quickly.  F<get-test-smoke> enables you to skip
running <perl configsmoke.pl> and lays out directories and files in a more
rational (in the author's opinion) manner than F<configsmoke.pl> does.  The
smoke reports which F<get-test-smoke> creates, however, are identical to those
created by a more standard F<Test-Smoke> run.

=head1 USAGE

=head2 Pre-Installation

=over 4

=item * Prerequisite Libraries

Before running F<get-test-smoke> you should install the non-Perl-5-core
modules which are prerequisites for F<Test-Smoke> or which this program itself
requires.  You should be able to use F<cpan>, F<cpanm> or F<cpanplus>.
Example:

    $> sudo cpan Perl::Download::FTP::Distribution \
        CGI::Util JSON JSON::XS System::Info \
        HTTP::Daemon HTTP::Message Test::NoWarnings

Some of these modules have been ported to operating systems like Debian Linux,
FreeBSD and OpenBSD, and those systems' ports installation programs can also
be used.  For example, here is a case where, on FreeBSD-11, FreeBSD packages
were used where available and CPAN libraries where not:

    $> sudo pkg install p5-CGI-Utils \
        p5-JSON \
        p5-JSON-XS \
        p5-System-Info \
        p5-HTTP-Daemon \
        p5-HTTP-Message \
        p5-Test-NoWarnings

    $> sudo cpan Perl::Download::FTP::Distribution

=item * Environmental Variables

The program presumes that your home directory can be located in an
environmental variable known as C<$HOMEDIR>.  If that is not the case, then
call:

    $> export HOMEDIR=/home/username

=back

=head2 Installation

Once you have downloaded this program from Github you should be able to run it
from any directory.  The simplest usage is:

    ./get-test-smoke --application_dir=/path/to/directory

As a precaution against overwriting existing smoke test data,
F<get-test-smoke> will throw an exception if the value provided for
C<application_dir> is an already existing directory.  So you don't need to
create C<application_dir> before calling the program; the program will create
the directory for you.

=head2 Command-Line Options

The following command-line options are available:

=over 4

=item * C<downloads_dir>

I<Optional.> Path to the directory to which you want the F<Test-Smoke> tarball
./getto be downloaded.  If not specified, falls back to, first, a directory named
in an environmental variable C<$DOWNLOADS_DIR> and then to a temporary
directory created via C<File::Temp::tempdir()>.

    --download_dir=/home/username/Downloads

=item * C<application_dir>

I<Required.> Path to the directory where you want F<Test-Smoke> to be
installed.  (The F<Test-Smoke> documentation recommends installing the library
in a I<non-standard> location, I<i.e.,> I<not> the location that would be
chosen automatically by F<cpan> or F<cpanm>.)

The program will create the directory specified by C<application_dir> but, as
a precaution, will C<die> if that directory already exists.

If you are conducting manual smoke testing, it is recommended that you create
a directory immediately below your home directory.  Example:

    $> mkdir /home/username/p5smoke
    $> ./get-test-smoke --application_dir=/home/username/p5smoke

=item * C<host> and C<hostdir>

These two switches are I<optional> but if used, must be used together.

F<get-test-smoke> downloads F<Test-Smoke> from a CPAN mirror via FTP.
Defaults to:

    --host=ftp.cpan.org --hostdir=pub/CPAN/modules/by-module

But you can select any FTP mirror as C<host> I<provided> that you supply the
appropriate value for C<hostdir> as well.  Example:

    --host=ftp.funet.fi --hostdir=pub/languages/perl/CPAN/modules/by-module

=item * C<downloaded_tarball>

I<Optional.>  Path to a tarball of F<Test-Smoke> which you have already
downloaded to some place on your system and which you have verified can be
unpacked.

    --downloaded_tarball=$DOWNLOADS_DIR/Test-Smoke-1.78.tar.gz

This option is provided because on occasion the F<Test-Smoke> tarballs have
had problems when being unpacked.

=item * C<verbose>

I<Optional.>  Extra information on C<STDOUT> while the program is running.
Once you have used the program several times, you will probably be able to
omit this.  Defaults to off.

=back

=head2 Run your first smoke test

At this point you should be able to change to the directory named as
C<application_dir> and kick off a short (30-40 minutes) smoke test of Perl 5
F<blead>.

    $> cd /home/username/p5smoke
    $> sh ./smokecurrent.sh

See L<http://perl5.test-smoke.org/report/63402> for a smoke test report created by this procedure.

=head1 ADVANCED USAGE

=head2 What Does the Program Do?

=over 4

=item *

Validates the command-line options.

=item *

Downloads the latest release of F<Test-Smoke> from the FTP mirror identified
by C<host> and C<hostdir> to the directory named in C<downloads_dir>.

=item *

Configures, builds and installs F<Test-Smoke> in C<application_dir> (but
without running the library's own test suite).

=item *

Prepares a F<smokecurrent_config> configuration file with reasonable defaults.
(This obviates the need to run C<perl configsmoke.pl> and respond to its
prompts, as you would need to do in a standard F<Test-Smoke> installation.)
WHAT ARE THE DEFAULTS?

=item *

Creates a directory and symlink structure underneath C<application_dir>
reflecting the values in F<smokecurrent_config>.

This directory structure differs from that in a standard F<Test-Smoke>
installation in the following ways:

=over 4

=item *

The F<git-perl> and <perl-current> directories are placed I<beneath>
C<application_dir> rather than at the same level in the filesystem as
C<application_dir>.

=item *

A directory called F<configs> is created below C<application_dir> to hold the
current F<smokecurrent_config> file as well as the variant F<perlcurrent.cfg>
files.  A symlink, also called F<smokecurrent_config> is created in
C<application_dir> pointing to its target in F<configs>.  A symlink called
F<perlcurrent.cfg> is created in C<application_dir> pointing to the particular
configuration file in F<configs> which you are currently using.  This approach
consolidates all the configuration files in a location of their own; the
symlinks keep F<Test-Smoke>'s operational programs happy.

=item *

A directory called F<scripts> is created below C<application_dir> to hold the
current F<smokecurrent.sh>.  A symlink, also called F<smokecurrent.sh> is
created in C<application_dir> pointing to its target in F<scripts>.  Should
you wish to create different versions of the shell program, do so in
C<scripts> and simply re-direct the symlink.

=back

=back

=head2 Advanced Usage of F<Test-Smoke>

=head3 Why would I want to use different F<perlcurrent.cfg> files?

Mainly to save time.  The default F<perlcurrent.cfg> that ships with
F<Test-Smoke> is useful for exhaustive testing of various ways to build
F<perl>, I<e.g.,> without and with C<-DDEBUGGING>.  But if you've been asked
to do one-off testing of a colleague's branch, you probably don't need a
configuration that will take many hours to completely run.

=head3 How do I test different branches in the Perl 5 core distribution?

Edit the file F<smokecurrent.gitbranch>.  Enter the name of the branch to be
tested on the first line of the file.

Note:  It is unfortunate that so many of F<Test-Smoke>'s files start with
I<smokecurrent>, as that makes command-line auto-completion more tedious.  So
here we provide a symlink:  F<gitbranch.smokecurrent>.

=cut

croak 'Environmental variable $HOMEDIR not defined'
    unless (exists $ENV{HOMEDIR} and (-d $ENV{HOMEDIR}));
my $cwd = cwd();

my ($downloaded_tarball, $downloads_dir, $host, $hostdir, $application_dir, $verbose);
GetOptions(
    "downloaded_tarball=s"  => \$downloaded_tarball,
    "downloads_dir=s"       => \$downloads_dir,
    "application_dir=s"     => \$application_dir,
    "host=s"                => \$host,
    "hostdir=s"             => \$hostdir,
    "verbose"               => \$verbose,
) or croak "Unable to get options";

# Validate options
if (! defined $application_dir) {
    my $msg = "$0 needs to create a directory to hold application;";
    $msg .= "\n  specify value for '--application_dir'";
    croak $msg;
}
else {
    if (-d $application_dir) {
        croak "'$application_dir' already exists; $0 is not permitted to overwrite it";
    }
    else {
        make_path($application_dir, { mode => 0711 });
        say "application_dir:        $application_dir" if $verbose;
    }
}

my $existing_tarball;
if (defined $downloaded_tarball) {
    croak "Unable to locate downloaded tarball $downloaded_tarball"
        unless -f $downloaded_tarball;
    $existing_tarball++;
}
unless ($existing_tarball) {
    $downloads_dir //= (exists $ENV{DOWNLOADS_DIR} && (-d $ENV{DOWNLOADS_DIR}))
        ? $ENV{DOWNLOADS_DIR} : tempdir();
    unless (-d $downloads_dir) { croak "Could not locate downloads_dir '$downloads_dir'"; }
    else { say "downloads_dir:          $downloads_dir" if $verbose; }

    if (! defined $host or ! defined $hostdir) {
        $host       = 'ftp.cpan.org';
        $hostdir    = 'pub/CPAN/modules/by-module';
    }
}
$verbose //= 0;

my $tslatest;
if ($existing_tarball) {
    $tslatest = $downloaded_tarball;
}
else {
    # download Test-Smoke via FTP
    chdir $downloads_dir or croak "Could not change to $downloads_dir";

    my $pdfd_object = Perl::Download::FTP::Distribution->new( {
        host            => $host,
        dir             => $hostdir,
        distribution    => 'Test-Smoke',
        verbose         => $verbose,
    } );
    croak "Could not create Perl::Download::FTP::Distribution object"
        unless defined $pdfd_object;
    if ($verbose) {
        say sprintf("%-24s%s" => 'host:', $host);
        say sprintf("%-24s%s" => 'hostdir:', $hostdir);
    }

    $tslatest = $pdfd_object->get_latest_release( {
        verbose         => $verbose,
        path            => $downloads_dir,
    } );
    croak "get_latest_release did not download Test-Smoke"
        unless -f $tslatest;
}

say "tslatest: $tslatest" if $verbose;
system(qq|gunzip -v $tslatest|) and croak "Unable to gunzip $tslatest";
my ($tarfile) = $tslatest =~ m/^(.*)\.gz$/;
say "tarfile: $tarfile" if $verbose;
system(qq|tar xvf $tarfile|) and croak "Unable to untar $tarfile";

my $tarball = basename($tslatest);
my ($distvname) = $tarball =~ m/(.+?)\.(?:tar\.(?:g?z|bz2)|zip|tgz)$/i;
croak "Unable to identify distvname" unless length($distvname);
if ($verbose) {
    say sprintf("%-24s%s" => 'tarball:', $tarball);
    say sprintf("%-24s%s" => 'distvname:', $distvname);
}


# Install Test-Smoke
chdir $distvname or croak "Could not change to $distvname";

$ENV{SMOKE_INSTDIR} = $application_dir;
$ENV{AUTOMATED_TESTING} = 1;
my $configure_command      = qq|$^X Makefile.PL|;
my $make_command           = qq|make|;
my $make_install_command   = qq|make install|;
for my $c ($configure_command, $make_command, $make_install_command) {
    $c .= q| 1>/dev/null| unless $verbose;
}
system($configure_command)      and croak "Unable to configure";
system($make_command)           and croak "Unable to make";
system($make_install_command)   and croak "Unable to make install";

# Here's the point at which we want to, in effect, override configsmoke.pl

chdir $application_dir or croak "Could not change to $application_dir";

my $my_conf = {
    'cfg' => "$application_dir/perlcurrent.cfg",
    'v' => 2,
    'smartsmoke' => 1,
    'renice' => 0,
    'killtime' => "+06:00",
    'umask' => 0,
    'perl_version' => "blead",
    'is56x' => 0,
    'ddir' => "$application_dir/perl-current",
    'sync_type' => "git",
    'patchbin' => whereis('patch'),
    'pfile' => "$application_dir/smokecurrent.patchup",
    'gitbin' => whereis('git'),
    'gitdir' => "$application_dir/git-perl",
    'gitorigin' => "git://github.com/Perl/perl5.git",
    'gitdfbranch' => "blead",
    'gitbranchfile' => "$application_dir/smokecurrent.gitbranch",
    'force_c_locale' => 0,
    'locale' => "",
    'defaultenv' => 0,
    'mail' => 0,
    'smokedb_url' => "http://perl5.test-smoke.org/report",
    'adir' => "$application_dir/logs/smokecurrent",
    'lfile' => "$application_dir/smokecurrent.log",
    'makeopt' => "",
    'testmake' => "make",
    'harnessonly' => 1,
    'hasharness3' => 1,
    'harness3opts' => "",
    'un_file' => "$application_dir/smokecurrent.usernote",
    'un_position' => "bottom",
    'delay_report' => "",
    'patch_type' => "multi",
    'poster' => "HTTP::Tiny",
    'skip_tests' => "$application_dir/smokecurrent.skiptests",
};

for my $dir (qw| ddir gitdir adir |) {
    my $sdir = $my_conf->{$dir};
    make_path($my_conf->{$dir}, { mode => 0711 });
    croak "Unable to create $sdir" unless -d $sdir;
}
for my $dir (qw| configs scripts |) {
    make_path($dir, { mode => 0711 });
    croak "Unable to create $dir" unless -d $dir;
}

# smokecurrent_config
my $smconflink = 'smokecurrent_config';
my $smconf = File::Spec->catfile($application_dir, 'configs', $smconflink);
open my $OUT, '>', $smconf or croak "Unable to open $smconf for writing";
say $OUT q|$conf = {|;
for my $k (sort keys %{$my_conf}) {
    say $OUT sprintf("    %-20s => %s" => ($k, qq|"$my_conf->{$k}",|));
}
say $OUT q|};|;
close $OUT or croak "Unable to close $smconf after writing";
symlink $smconf, $smconflink or croak "Unable to create symlink to $smconf";

# perlcurrent.cfg
# move Test::Smoke default into position, then write two more configurations
my $pcfg_default = File::Spec->catfile($application_dir, qw| lib Test Smoke perlcurrent.cfg |);
croak "Unable to locate $pcfg_default" unless (-f $pcfg_default);
my $pcfg_default_in_position = File::Spec->catfile($application_dir, qw| configs perlcurrent.default.cfg |);
copy($pcfg_default => $pcfg_default_in_position)
    or croak "Unable to copy $pcfg_default to $pcfg_default_in_position";
# perlcurrent.freebsd_usual.cfg
my $pcfg_freebsd_usual = File::Spec->catfile($application_dir, qw| configs perlcurrent.freebsd_usual.cfg |);
open my $OUT, '>', $pcfg_freebsd_usual or croak "Unable to open $pcfg_freebsd_usual for writing";
my $doc = <<EOF;
==
-Duseithreads -Doptimize="-O2 -pipe -fstack-protector -fno-strict-aliasing" -Dcc="ccache clang -Qunused-arguments -fcolor-diagnostics"
==
#-Uuseperlio
#-Duse64bitint
#-Duselongdouble
#-Dusemorebits
==
/-DDEBUGGING/
-DDEBUGGING
EOF
say $OUT $doc;
close $OUT or croak "Unable to close $pcfg_freebsd_usual after writing";
# perlcurrent.freebsd_short.cfg
my $pcfg_freebsd_short = File::Spec->catfile($application_dir, qw| configs perlcurrent.freebsd_short.cfg |);
open my $OUT, '>', $pcfg_freebsd_short or croak "Unable to open $pcfg_freebsd_short for writing";
my $doc = <<EOF;
==
-Duseithreads -Doptimize="-O2 -pipe -fstack-protector -fno-strict-aliasing"
==
#-Uuseperlio
#-Duse64bitint
#-Duselongdouble
#-Dusemorebits
==
#/-DDEBUGGING/
#-DDEBUGGING
EOF
say $OUT $doc;
close $OUT or croak "Unable to close $pcfg_freebsd_short after writing";
# We'll default to a very short configuration which runs only a threaded build
# perlio and stdio, no debugging -- i.e., 2 runs.
symlink $pcfg_freebsd_short, 'perlcurrent.cfg'
    or croak "Unable to create symlink to $pcfg_freebsd_short";

# smokecurrent.gitbranch
my $gitbranchfile = $my_conf->{gitbranchfile};
open my $OUT, '>', $gitbranchfile or croak "Unable to open $gitbranchfile for writing";
say $OUT 'blead';
close $OUT or croak "Unable to close $gitbranchfile after writing";
symlink $gitbranchfile, 'gitbranch.smokecurrent' or croak "Unable to create symlink to $gitbranchfile";

# smokecurrent.patchup
my $pfile = $my_conf->{pfile};
open my $OUT, '>', $pfile or croak "Unable to open $pfile for writing";
say $OUT <<EOMSG;
# Put one filename of a patch on a line, optional args for patch
# follow the filename separated by a semi-colon (;) [-p1] is default
# optionally followed by another ';' and description (added to patchlevel.h)
# /path/to/patchfile.patch;-p0 -R;Description for this patch
# Empty lines and lines starting with '#' are ignored
# File paths are relative to '$my_conf->{ddir}'
# If your patch requires 'regen_perly' you'll need Bison 2 and
# uncomment the next line (keep the exclamation-point there):
#!perly
EOMSG
close $OUT or croak "Unable to close $pfile after writing";

# smokecurrent.log
my $lfile = $my_conf->{lfile};
open my $OUT, '>', $lfile or croak "Unable to open $lfile for writing";
say $OUT ''; # We apparently can't symlink to an empty file
close $OUT or croak "Unable to close $lfile after writing";
symlink $lfile, 'x.log' or croak "Unable to create symlink to $lfile";

# smokecurrent.usernote
my $un_file = $my_conf->{un_file};
open my $OUT, '>', $un_file or croak "Unable to open $un_file for writing";
close $OUT or croak "Unable to close $un_file after writing";

# smokecurrent.skiptests
my $skip_tests_file = $my_conf->{skip_tests};
open my $OUT, '>', $skip_tests_file or croak "Unable to open $skip_tests_file for writing";
say $OUT "# One test name on a line";
close $OUT or croak "Unable to close $skip_tests_file after writing";

# smokecurrent.sh
# This is a somewhat stripped down version of that which would normally be
# generated by configsmoke.pl

my $scsh_link = 'smokecurrent.sh';
my $scsh = File::Spec->catfile('scripts', $scsh_link);
open my $OUT, '>', $scsh or croak "Unable to open $scsh for writing";
my $start = File::Spec->catfile($application_dir, 'startsmoke');
my $end   = File::Spec->catfile($application_dir, 'endsmoke');
my $shellscript = <<EOF;
#! /bin/sh
#
# Uncomment this to be as nice as possible. (Jarkko)
# (renice -n 20 \$\$ >/dev/null 2>&1) || (renice 20 \$\$ >/dev/null 2>&1)

cd $application_dir
date
date > $start
CFGNAME=\${CFGNAME:-smokecurrent_config}
LOCKFILE=\${LOCKFILE:-smokecurrent.lck}
continue=''
if test -f "\$LOCKFILE" && test -s "\$LOCKFILE" ; then
    echo "We seem to be running (or remove \$LOCKFILE)" >& 2
    exit 200
fi
echo "\$CFGNAME" > "\$LOCKFILE"

PATH=.:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:$ENV{HOMEDIR}/bin:$ENV{HOMEDIR}/bin/perl:$ENV{HOMEDIR}/bin/shell
export PATH
umask 0
/usr/bin/env perl ./tssmokeperl.pl -c "\$CFGNAME" \$continue \$* > $my_conf->{lfile} 2>&1

rm "\$LOCKFILE"
date
date > $end
grep -E 'FAIL|http:\/\/' $my_conf->{lfile} | perl -p -e 's/^\\\[.*?\\\] //'
EOF
say $OUT $shellscript;
close $OUT or croak "Unable to close $scsh after writing";
symlink $scsh, $scsh_link or croak "Unable to create symlink to $scsh";

say "Finished" if $verbose;

sub whereis {
    my $prog = shift;
    return undef unless $prog; # you shouldn't call it '0'!

    my $p_sep = $Config::Config{path_sep};
    my @path = split /\Q$p_sep\E/, $ENV{PATH};
    my @pext = split /\Q$p_sep\E/, $ENV{PATHEXT} || '';
    unshift @pext, '';

    foreach my $dir ( @path ) {
        foreach my $ext ( @pext ) {
            my $fname = File::Spec->catfile( $dir, "$prog$ext" );
            if ( -x $fname ) {
                return $fname =~ /\s/ ? qq/"$fname"/ : $fname;
            }
        }
    }
    return '';
}

=head1 AUTHOR, COPYRIGHT and LICENSE

=head2 Author

    Name:           James E Keenan
    CPANID:         JKEENAN
    Email:          jkeenan at cpan dot org
    Website:        http://thenceforward.net/perl/
    Repository:     https://github.com/jkeenan/scripts-misc

=head2 Copyright

Copyright 2018, James E Keenan.  All rights reserved.

=head2 License

See: L<https://github.com/jkeenan/scripts-misc/blob/master/LICENSE>

=cut

