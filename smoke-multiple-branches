#!/usr/bin/env perl
use 5.14.0;
use warnings;
our $VERSION = '0.02';
use Carp;
use File::Spec;
use Tie::File;

=head1 NAME

smoke-multiple-branches - Smoke-test a list of branches using one configuration

=head1 USAGE

    $ cd /path/to/test-smoke-rig
    $ smoke-multiple-branches <smoke-me/branch1> <smoke-me/branch2> ...

=head1 DESCRIPTION

This program can be used when you need to smoke-test more than one F<smoke-me>
branch using the same configuration for each.  By I<configuration> we mean the
same F<smokecurrent_config>, the same F<perlcurrent.cfg>, etc.  The program
simply inserts the name of a branch into the first line of
F<smokecurrent.gitbranch>, then invokes F<sh ./smokecurrent.sh>.

Each branch to be smoke-tested must be present in L<the main Perl5 repository
on GitHub|https://github.com/Perl/perl5> and its name must begin with
C<smoke-me/>.  If the branch cannot be located a warning will be issued and
the program will proceed to the next branch provided on the command line.

The program is intended to be called from the same directory within your
F<Test-Smoke>-based smoke-testing rig in which are found
F<smokecurrent.gitbranch> and F<smokecurrent.sh>.

=cut

# We expect to find two files in the current directory; die if we cannot.
my $scbg = File::Spec->catfile('.', 'smokecurrent.gitbranch');
my $scsh = File::Spec->catfile('.', 'smokecurrent.sh');
for my $f ($scbg, $scsh) {
    croak "Could not locate '$f'" unless -e $f;
}

croak "Need branch(es) to be smoked on command-line"
    unless @ARGV;

my @branches = @ARGV;
for my $br (@branches) {
    croak "'$br' does not look like a smoke-me branch"
        unless $br =~ m{^smoke-me/};
}

for my $br (@branches) {
    my @lines;
    tie @lines, 'Tie::File', $scbg or croak "Unable to tie $scbg";
    unshift @lines, $br;
    untie @lines or croak "Unable to untie from $scbg";
    system(qq| sh $scsh |)
        and carp "Did not get 'exit 0' when running 'sh $scsh' for $br";
    say "Completed $br";
}
say "Finished all branches requested";

=head1 LIMITATION

The program currently cannot itself determine whether a F<smoke-me/> branch
provided on the command-line actually exists in the main Perl5 repository.  It
is F<Test-Smoke> which does the fetches from that repository, but, as far as I
can tell, if F<Test-Smoke> does not find a branch with the name provided by
the user in that repository, it simply reverts to whatever was the last branch
being tested in the F<perl-current/> subdirectory.  The C<system> call to F<sh
./smokecurrent.sh> is therefore likely to exit successfully (exit value C<0>)
even though the branch requested was not actually run.

So make sure your F<smoke-me/> branch actually exists before running the program.

=cut

